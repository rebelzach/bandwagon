
@page "/embed/video"

@inject UserCircuitProvider SessionStore
@inject GroupedMessageCollector MessageCollector

<HackathonSampleVideo />

@{
    var visibility = "";
    if (_orgSession?.GroupingEnabled != true || _userSession?.ShowGrouping != true)
        visibility = "visibility: hidden;";
}

@*
<div class="groups" style="@visibility">
    @{
        var slotIndex = 1;
    }
    @foreach (var group in MessageCollector.Groups)
    {
        var cooldownMs = 10000.0;
        var opacity = (cooldownMs - (timestamp - group.LastMessageAddedAt)) / cooldownMs;
        if (opacity < 0.0)
        {
            continue;
        }

        <div @key="group.Id" class="group slot-@slotIndex" style="opacity: @opacity;">
            <div class="group-inner">
                @foreach (var scoredMessage in group.Messages.TakeLast(3))
                {
                    var message = scoredMessage.Message;
                    <div class="grouped-message" style="opacity: @opacity;">
                        <span class="grouped-message--name">@message.DisplayName:</span>
                        <span class="grouped-message--text">@ReplaceEmotes(message)</span>
                    </div>
                }
            </div>
            <div class="group-count" style="opacity: @opacity;">x@(group.Messages.Count)</div>
        </div>
        ++slotIndex;
    }
</div>
*@

@code {
    List<StoredChatMessage> messages = new List<StoredChatMessage>();

    UserCircuit? _userSession;
    OrgCircuit? _orgSession;

    double threshold = 1;

    long startTime;
    long endTime;
    long timestamp;
    long periodSecs = 5;

    bool didSync;

    DateTime? LastTick;

    private MarkupString ReplaceEmotes(IChatMessage m)
    {
        var s = m.Message;
        var p = 0;
        var b = new StringBuilder();
        foreach (var e in m.EmoteSet.Emotes.OrderBy(e => e.StartIndex))
        {
            b.Append(s[p..((int)e.StartIndex)]);
            b.Append($"<img class='message-emote' src='{e.ImageUrl}'>");
            p = (int)e.EndIndex + 1;
        }
        b.Append(s[p..]);
        return (MarkupString)b.ToString();
    }
}
