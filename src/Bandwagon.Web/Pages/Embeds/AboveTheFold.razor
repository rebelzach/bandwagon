@page "/embed/above-fold"

@inject UserCircuitProvider SessionStore
@inject OrgCircuitProvider OrgSessionStore
@inject IEmbed Embed
@inject IOrgClient OrgClient
@inject IUserClient UserClient

@if (_orgSession is null || _userSession?.OrgUser is null)
{
    return;
}

<div id="embed-above-the-fold">
    <div id="chat-container">
        <ChatGroups />
        <ChatBox />
    </div>
    <div>
        @if (_userSession.OrgUser.RoleConnection?.Nodes?.Any(n => n.Slug == "admin") ?? false)
        {
            <div>
                Streamer
            </div>
            <label>
                <input type="checkbox" @bind="_orgSession.GroupingEnabled" /> Enable Grouping
            </label>
        }
        else
        {
            <div>
                Chatter
            </div>
            <label>
                <input type="checkbox" @bind="_userSession.ShowGrouping" /> Show Grouping
            </label>
        }
    </div>
</div>

@code {

    UserCircuit? _userSession;
    OrgCircuit? _orgSession;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _userSession = await SessionStore.GetAsync();
        _orgSession = await OrgSessionStore.GetAsync();

        await OrgClient.SubscribeAsync(org =>
        {
            InvokeAsync(() =>
            {
                _orgSession.Org = org;
                StateHasChanged();
            });
        });

        await UserClient.SubscribeUserAsync(user =>
        {
            InvokeAsync(() =>
            {
                _userSession.User = user;
                StateHasChanged();
            });
        });

        await UserClient.SubscribeOrgUserAsync(user =>
        {
            InvokeAsync(() =>
            {
                _userSession.OrgUser = user;
                StateHasChanged();
            });
        });

        StateHasChanged();
    }
}

