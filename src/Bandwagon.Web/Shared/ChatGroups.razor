
@inject LiveChatCircuitProvider LiveChatProvider

@{
    if (LiveChat is null)
        return;

    var visibilityStyle = "";
    if (!Visible)
        visibilityStyle = "display: none;";

    var groups = LiveChat.Messages.Groups;
    var groupsClass = groups.Any() ? "" : "groups--no-data";
}

<div class="groups @groupsClass" style="@visibilityStyle">
    @{
        var slotIndex = 1;
    }
    @foreach (var group in LiveChat.Messages.Groups)
    {
        var cooldownMs = LiveChat.Messages.GroupCooldownSeconds * 1000;
        var opacity = (cooldownMs - (LiveChat.CurrentTimestampMs - group.LastMessageAddedAt)) / cooldownMs;
        if (opacity < 0.0)
        {
            continue;
        }
        var style = $"opacity: {opacity};";
        <div @key=group class="group slot-@slotIndex" style="@style">
            <div class="group-inner">
                @foreach (var collectedMessage in group.Messages.TakeLast(10))
                {
                    var message = collectedMessage.Message;
                    <div @key="collectedMessage" class="grouped-message slide-in-bottom" style="@style">
                        <span class="grouped-message--name">@message.DisplayName:</span>
                        <span class="grouped-message--text">@ReplaceEmotes(message)</span>
                    </div>
                }
            </div>
            <div class="group-count" style="@style">x@(group.Messages.Count)</div>
        </div>
        ++slotIndex;
    }
</div>

@code {
    [Parameter]
    public bool Visible { get; set; } = true;

    ILiveChatCircuit? LiveChat;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        LiveChat = await LiveChatProvider.GetAsync();

        LiveChat.Updated += () => InvokeAsync(() => StateHasChanged());
    }

    private MarkupString ReplaceEmotes(IChatMessage m)
    {
        var s = m.Message;
        var p = 0;
        var b = new StringBuilder();
        foreach (var e in m.EmoteSet.Emotes.OrderBy(e => e.StartIndex))
        {
            b.Append(s[p..((int)e.StartIndex)]);
            b.Append($"<img class='message-emote' src='{e.ImageUrl}'>");
            p = (int)e.EndIndex + 1;
        }
        b.Append(s[p..]);
        return (MarkupString)b.ToString();
    }
}
